type Factory @entity {
    id: ID!
    owner: Bytes!
}

type Hypervisor @entity {
  id: ID!
  owner: Bytes!
  stakingToken: Bytes
  totalStakedAmount: BigInt
  rewardToken: Bytes
  rewardPool: Bytes
  rewardPoolAmount: BigInt
  powerSwitch: Bytes
  bonusTokens: [Bytes!]
  vaultFactory: Factory
}

type Visor @entity {
    id: ID!
    owner: User!
    operator: User
    tokenId: BigInt!
    staked: [StakedToken!] @derivedFrom(field: "visor")
    rewardClaimed: [RewardedToken!] @derivedFrom(field: "visor")
}

type VisorTemplate @entity {
  id: ID!
  address: Bytes!
  active: Boolean!
}

type User @entity {
  id: ID!
  visorsOwned: [Visor!] @derivedFrom(field: "owner")  # Visors owned by this user
  visorsApproved: [Visor!] @derivedFrom(field: "operator")  # Visors where this user is approved as an operator
  operators: [OwnerOperator!] @derivedFrom(field: "operator")  # Operators this users delegates to
  operatorFor: [OwnerOperator!] @derivedFrom(field: "owner")   # Other users that this user is an operator for
}

type OwnerOperator @entity {
  id: ID!
  owner: User!
  operator: User!
  approved: Boolean!
}

type StakedToken @entity {
    id: ID!  # Vault address-Token address
    token: Bytes!
    visor: Visor!
    amount: BigInt!
}

type RewardedToken @entity {
    id: ID!  # Vault address-Token address
    token: Bytes!
    visor: Visor!
    amount: BigInt!
}
